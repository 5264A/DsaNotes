Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.
Example 2:

Input:
N = 3
value[]  = {9,15,0}
Output: 0 9 15
Explanation: After sorting the given
linked list , resultant will be
0->9->15.
Your Task:
For C++ and Python: The task is to complete the function mergeSort() which sort the linked list using merge sort function.
For Java: The task is to complete the function mergeSort() and return the node which can be used to print the sorted linked list.

Expected Time Complexity: O(N*Log(N))
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 105

.................................................................................................................................................................
class Solution{
  public:
  Node* findMid(Node* head){
    if(head == NULL) return NULL;
    
    Node* fast = head->next;
    Node* slow = head;
    
    while(fast != NULL && fast->next != NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

Node* merge(Node* left, Node* right){
    if(left == NULL) return right;
    if(right == NULL) return left;
    
    Node* temp = NULL;
    if(left->data <= right->data) {
        temp = left;
        temp->next = merge(left->next, right);
    } else {
        temp = right;
        temp->next = merge(left, right->next);
    }
    
    return temp;
}
public:
Node* mergeSort(Node* head) {
    if(head == NULL || head->next == NULL) return head;
    
    Node* mid = findMid(head);
    Node* left = head;
    Node* right = mid->next;
    mid->next = NULL;
    
    left = mergeSort(left);
    right = mergeSort(right);
    
    Node* result = merge(left, right);
    return result;
}
};
