Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

 

Example 1:


Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
Example 2:


Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
 

Constraints:

The number of nodes in the root tree is in the range [1, 2000].
The number of nodes in the subRoot tree is in the range [1, 1000].
-104 <= root.val <= 104
-104 <= subRoot.val <= 104
...........................................................................................................................................................................


class Solution {
public:
    bool isSame(TreeNode* root,TreeNode* sub){
        if(root==NULL && sub==NULL){
            return true;
        }
        else if(root==NULL || sub==NULL){
            return false;
        }
        if(root->val!=sub->val){
             return false;
         }
        bool val2=isSame(root->left,sub->left);
        bool val3=isSame(root->right,sub->right);
        if( val2 && val3){
            return true;
        }
        else{
            return false;
        }
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root==NULL ){
            return false;
        }
       
       if(isSame(root,subRoot)){
          return true;
       }
       bool l2=isSubtree(root->left,subRoot);
       bool l3=isSubtree(root->right,subRoot);
       if( l2 || l3){
           return true;
       }
       else{
           return false;
       }
    }
};
