
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
Accepted
1.5M
Submissions
2M
Acceptance Rate
75.4%
.......................................................................................................................................................................


class Solution {
public:
    void solve(vector<int>& nums,int index,vector<vector<int>>&v){
        
        if(index>=nums.size()){
            v.push_back(nums);
            return ;}

           
            for(int i=index;i<nums.size();i++){
             swap(nums[index],nums[i]);
             solve(nums,index+1,v);
             swap(nums[index],nums[i]);
            }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>v;
        int i=0;int j=n-1;
        solve(nums,i,v);
        return v;

    }
};
