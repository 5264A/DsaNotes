Given a matrix of size r*c. Traverse the matrix in spiral form.

Example 1:

Input:
r = 4, c = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
Explanation:

Example 2:

Input:
r = 3, c = 4  
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12}}
Output: 
1 2 3 4 8 12 11 10 9 5 6 7
Explanation:
Applying same technique as shown above, 
output for the 2nd testcase will be 
1 2 3 4 8 12 11 10 9 5 6 7.

Your Task:
You dont need to read input or print anything. Complete the function spirallyTraverse() that takes matrix, r and c as input parameters and returns a list of integers denoting the spiral traversal of matrix. 

Expected Time Complexity: O(r*c)
Expected Auxiliary Space: O(r*c), for returning the answer only.
..................................................................................................................................................................................

vector<int>ans;

        int starti=0;

        int endi=r-1;

        int startj=0;

        int endj=c-1;

        int count=0;

        int total=r*c;

        

        while(count<total){

            

            for(int i=startj; i<=endj && count<total ; i++){

                ans.push_back(matrix[starti][i]);

                count++;

            }

            starti++;

            

            for(int i=starti; i<=endi && count<total ; i++){

                ans.push_back(matrix[i][endj]);

                count++;

            }

            endj--;

            

            for(int i=endj; i>=startj && count<total ; i--){

                ans.push_back(matrix[endi][i]);

                count++;

            }

            endi--;

            

            for(int i=endi; i>=starti && count<total ; i--){

                ans.push_back(matrix[i][startj]);

                count++;

            }

            startj++;

            

        }

        

        return ans;

        
