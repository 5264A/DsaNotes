Given two binary strings A and B consisting of only 0s and 1s. Find the resultant string after adding the two Binary Strings.
Note: The input strings may contain leading zeros but the output string should not have any leading zeros.


Example 1:

Input:
A = "1101", B = "111"
Output: 10100
Explanation:
 1101
+ 111
10100
Example 2:

Input: 
A = "10", B = "01"
Output: 11
Explanation: 
  10
+ 01
  11

Your Task:
You don't need to read input or print anything. Your task is to complete the function addBinary() which takes 2 binary string A and B and returns a binary string denoting the addition of both the strings.


Expected Time Complexity: O(max(|A|, |B|)).
Expected Auxiliary Space: O(max(|A|, |B|)) (for output string).


Constraints:
1 ≤ |A|, |B| ≤ 106
.....................................................................................................................................................................


class Solution{
public:	
	string addBinary(string A, string B)
	{
	   reverse(A.begin(),A.end());
	   reverse(B.begin(),B.end());
	   string str="";
	   int i=0;
	   int j=0;
	   int n=A.size();
	   int m=B.size();
	   int carry=0;
	   while(i!=n && j!=m){
	       int sum=(A[i]-'0')+(B[j]-'0')+carry;
	       if(sum==2){
	           sum=0;
	           carry=1;
	       }
	       else if(sum==1){
	           sum=1;
	           carry=0;
	       }
	       else if(sum==3){
	           sum=1;
	           carry=1;
	       }
	       str+=to_string(sum);
	       i++;
	       j++;
	   }
	     while(i!=n ){
	       int sum=(A[i]-'0')+carry;
	       if(sum==2){
	           sum=0;
	           carry=1;
	       }
	       else if(sum==1){
	           sum=1;
	           carry=0;
	       }
	       else if(sum==3){
	           sum=1;
	           carry=1;
	       }
	       str+=to_string(sum);
	       i++;
	     
	   }
	   
	     while( j!=m){
	       int sum=(B[j]-'0')+carry;
	       if(sum==2){
	           sum=0;
	           carry=1;
	       }
	       else if(sum==1){
	           sum=1;
	           carry=0;
	       }
	       else if(sum==3){
	           sum=1;
	           carry=1;
	       }
	       str+=to_string(sum);
	       
	       j++;
	   }
	   if(carry!=0){
	       str+=to_string(carry);
	       
	   }
	   reverse(str.begin(),str.end());
	   int n1=str.size();
	   string ans="";
	   int diff=-1;
	   
	   for(int i=0;i<n1;i++){
	   if(str[i]!='0'){
	       diff=i;
	       break;
	   }}
	   if(diff==-1){
	       ans='0';
	   }else{
	   for(int i=diff;i<n1;i++){
	       ans+=str[i];
	   }}
	   return ans;
	   
	}
};
