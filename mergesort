Given an array arr[], its starting position l and its ending position r. Sort the array using merge sort algorithm.
Example 1:

Input:
N = 5
arr[] = {4 1 3 9 7}
Output:
1 3 4 7 9
Example 2:

Input:
N = 10
arr[] = {10 9 8 7 6 5 4 3 2 1}
Output:
1 2 3 4 5 6 7 8 9 10

Your Task:
You don't need to take the input or print anything. Your task is to complete the function merge() which takes arr[], l, m, r as its input parameters and modifies arr[] in-place such that it is sorted from position l to position r, and function mergeSort() which uses merge() to sort the array in ascending order using merge sort algorithm.

Expected Time Complexity: O(nlogn) 
Expected Auxiliary Space: O(n)

Constraints:
1 <= N <= 105
1 <= arr[i] <= 103
...............................................................................................................................................................................


    public:
    void merge(int arr[], int s, int mid, int e)
    {
    
    int len1=mid-s+1;
    int len2=e-mid;
    int *first=new int[len1];
    int *second=new int[len2];
    int k=s;
    for(int i=0;i<len1;i++){
        first[i]=arr[k];
        k++;
    }
    k=mid+1;
    for(int i=0;i<len2;i++){
        second[i]=arr[k];
        k++;
    }
    int index1=0;
    int index2=0;
    int mainindex=s;
    while(index1<len1 &&index2<len2){
        if(first[index1]<second[index2]){
            arr[mainindex++]=first[index1++];
        }else{
            arr[mainindex++]=second[index2++];
        }
    }
     while(index1<len1){
        arr[mainindex++]=first[index1++];
     }
      while(index2<len2){
         arr[mainindex++]=second[index2++];
      }
         
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {    
        if(l>=r){
            return ;
        }
        int mid=l+(r-l)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
