Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
...........................................................................................................................................................



class Solution {
public:
int height(TreeNode* root){
    if(root==NULL){
        return 0;
    }
    int l1=height(root->left);
    int l2=height(root->right);
    return max(l1,l2)+1;
}
    
    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL){
            return -1;
        }
        queue<TreeNode*>q;
        int a=height(root);
        int cnt=0;
        q.push(root);
        while(!q.empty()){
            int s=q.size();
            cnt++;
            for(int i=0;i<s;i++){
                TreeNode* front=q.front();
                q.pop();
                if(cnt==a){
                    return front->val;
                    break;
                }
                if(front->left!=NULL){
                    q.push(front->left);
                }
                if(front->right!=NULL){
                    q.push(front->right);
                }

            }
        }return -1;
        

    }
};
..................................................................................................................

2nd Solution:-
class Solution {
public:

    
    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL){
            return -1;
        }
        queue<TreeNode*>q;
        
        q.push(root);
        while(!q.empty()){
            
           
            
                root=q.front();
                q.pop();
               
                
                if(root->right!=NULL){
                    q.push(root->right);
                }
                if(root->left!=NULL){
                    q.push(root->left);
                }

            
        }return root->val;
        

    }
};
