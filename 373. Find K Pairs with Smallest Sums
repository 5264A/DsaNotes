You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in ascending order.
1 <= k <= 104
..............................................................................................................................................................................................

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
           priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
// In the above line I have created a 
// min heap of pair<sum,pair<index1,index2>>

// pushing sum and pair of all element of nums1 with first element 
// of nums2
        for(int i=0;i<nums1.size();i++){
            int sum=nums1[i]+nums2[0];
            pq.push({sum,{i,0}});
        }
        vector<vector<int>> answer;
        int count=0;


        while(count<k && !pq.empty()){
            count++;
            vector<int> temp;
// keep on removing  top element after saving the pair
            pair<int,int> x=pq.top().second;
            temp.push_back(nums1[x.first]);
            temp.push_back(nums2[x.second]);
            answer.push_back(temp);
            pq.pop();
            if(x.second+1<nums2.size()){
// Add next pair containing same nums1 element but index(nums2)+1th //// element of nums2
                int sum=nums1[x.first]+nums2[x.second+1];
                pq.push({sum,{x.first,x.second+1}});
            }
        }
        return answer;
    }
    
};
